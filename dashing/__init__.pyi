from __future__ import annotations

import typing

from blessed import Terminal

border_bl: str
border_br: str
border_tl: str
border_tr: str
border_h: str
border_v: str
hbar_elements: typing.Tuple[str, str, str, str, str, str, str]
vbar_elements: typing.Tuple[str, str, str, str, str, str, str, str]
braille_left: typing.Tuple[int, int, int, int, int]
braille_right: typing.Tuple[int, int, int, int, int]
braille_r_left: typing.Tuple[int, int, int]
braille_r_right: typing.Tuple[int, int, int]

class TBox(typing.NamedTuple):
    t: Terminal
    x: int
    y: int
    w: int
    h: int

class Tile(object):
    title: typing.Optional[str]
    color: int
    border_color: typing.Optional[int]

    def __init__(self, title: typing.Optional[str] = ..., border_color: typing.Optional[int] = ..., color: int = ...): ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...
    def _draw_borders(self, tbox: TBox) -> None: ...
    def _draw_borders_and_title(self, tbox: TBox) -> Tbox: ...
    def _fill_area(self, tbox: TBox, char: str, *a, **kw) -> None: ...
    def display(self) -> None: ...
    def _draw_title(self, tbox: TBox, fill_all_width: bool) -> None: ...

class Split(Tile):
    items: typing.Sequence[Tile]

    def __init__(self, *items, **kw): ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...

class VSplit(Split): ...

class HSplit(Split): ...

class Text(Tile):
    text: str

    def __init__(self, text: str, color: int = ..., *args, **kw): ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...

class Log(Tile):
    logs: typing.Deque[str]

    def __init__(self, *args, **kw): ...
    def _display(self, tbox: TBox, parent: Tile): ...
    def append(self, msg: str) -> None: ...

class HGauge(Tile):
    value: typing.Union[int, float]
    label: typing.Optional[str]

    def __init__(self, label: typing.Optional[str] = ..., val: typing.Union[int, float] = ...,
                 color: int = ..., **kw): ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...

class VGauge(Tile):
    value: typing.Union[int, float]

    def __init__(self, val: typing.Union[int, float] = ..., color: int = ..., **kw): ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...

class ColorRangeVGauge(Tile):
    colormap: typing.Sequence[typing.Tuple[int, int]]
    value: typing.Union[int, float]

    def __init__(self, val: typing.Union[int, float] = ...,
                 colormap: typing.Sequence[typing.Tuple[int, int]] = ..., **kw): ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...

class VChart(Tile):
    value: typing.Union[int, float]
    datapoints: typing.Deque[typing.Union[int, float]]

    def __init__(self, val: typing.Union[int, float] = ..., **kw): ...
    def append(self, dp: typing.Union[int, float]) -> None: ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...

class HChart(Tile):
    value: typing.Union[int, float]
    datapoints: typing.Deque[typing.Union[int, float]]

    def __init__(self, val: typing.Union[int, float] = ..., *args, **kw): ...
    def append(self, dp: typing.Union[int, float]) -> None: ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...

class HBrailleChart(Tile):
    value: typing.Union[int, float]
    datapoints: typing.Deque[typing.Union[int, float]]

    def __init__(self, val: typing.Union[int, float] = ..., *args, **kw): ...
    def append(self, dp: typing.Union[int, float]) -> None: ...
    def _generate_braille(self, lmax: int, rmax: int) -> str: ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...

class HBrailleFilledChart(Tile):
    value: typing.Union[int, float]
    datapoints: typing.Deque[typing.Union[int, float]]

    def __init__(self, val: typing.Union[int, float] = ..., *args, **kw): ...
    def append(self, dp: typing.Union[int, float]) -> None: ...
    def _generate_braille(self, lmax: int, rmax: int) -> str: ...
    def _display(self, tbox: TBox, parent: Tile) -> None: ...

